openapi: 3.0.2
info:
  title: Jaana_Mairit_apibank
  version: 1.0.0
paths:
  /users:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/postUsersRequest'
        required: true
      tags:
        - users
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userObject'
          description: User successfully registered.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
              examples:
                Invalid password:
                  value:
                    error: Invalid password
                Parameter is required:
                  value:
                    error: 'User validation failed: {param}: Path `{param}` is required.'
          description: Bad request
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
              examples:
                Username already exists:
                  value:
                    error: Username already exists
          description: Username already exists
      summary: Registers a new user
  /sessions:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/postSessionsRequest'
        required: true
      tags:
        - sessions
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/postSessionResponse'
          description: User logged in successfully
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
              examples:
                Invalid username/password:
                  value:
                    error: Invalid username/password
          description: Invalid username/password
      summary: Logs the user in
    delete:
      tags:
        - sessions
      responses:
        '204':
          description: User logged out successfully
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
              examples:
                Missing Authorization header:
                  value:
                    error: Missing Authorization header
                Invalid token:
                  value:
                    error: Invalid  token
          description: Unauthorized
      security:
        -
          Token: []
      summary: Logs the user out
  /users/current:
    get:
      tags:
        - users
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getUsersCurrentResponse'
          description: Succesful request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
              examples:
                Missing Authorization header:
                  value:
                    error: Missing Authorization header
                Invalid token:
                  value:
                    error: Invalid  token
          description: Unauthorized
      security:
        -
          Token: []
      summary: Returns currently logged in user's data
components:
  schemas:
    postUsersRequest:
      title: POST /users request
      description: ''
      required:
        - name
        - username
        - password
      type: object
      properties:
        name:
          description: User's full name
          type: string
        username:
          description: Desired username
          type: string
        password:
          format: password
          description: Desired password
          type: string
      example:
        name: Jaana
        username: lasu
        password: kurimuri
    userObject:
      title: userObject
      description: ''
      type: object
      properties:
        accounts:
          description: Array of user's bank accounts
          type: array
          items:
            $ref: '#/components/schemas/account'
        name:
          description: User's full name
          type: string
        username:
          type: string
        password:
          type: string
        id:
          description: User's ID
          type: string
      example:
        id: 5f79c2269e019140b45be2e2
        name: Jaana
        username: jaana
        accounts:
          -
            name: Main
            balance: 100000
            currency: EUR
            userId: 5f79c2269e019140b45be2e2
            number: abc5775a9d8c866de6cf89f70fd8b5b1771
            id: 5f79c2269e019140b45be2e3
    errorResponse:
      title: errorResponse
      description: ''
      type: object
      properties:
        error:
          type: string
      example:
        error: Error message
    postSessionsRequest:
      title: POST /sessions request
      description: ''
      type: object
      properties:
        username:
          description: A valid username
          type: string
        password:
          description: The password associated with given username
          type: string
      example:
        username: lasu
        password: kurimuri
    postSessionResponse:
      title: POST /sessions response
      description: ''
      type: object
      properties:
        token:
          description: >-
            A session token which needs to be sent back to server in Authorization header with
            every request (Authorization: Bearer <token>)
          type: string
      example:
        token: 5f7f55f8f703183820ec2ce6
    getUsersCurrentResponse:
      title: Root Type for getUsersCurrentResponse
      description: ''
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        username:
          type: string
        accounts:
          description: Array of user's accounts
          type: array
          items:
            $ref: '#/components/schemas/account'
      example:
        id: 5f800978bda5b74f6423ba25
        name: Jaana
        username: lasu
        accounts:
          -
            name: Main
            balance: 100000
            currency: EUR
            number: abcbb509d401cfc45fd2f98620d5e99a4c5
    account:
      title: Root Type for account
      description: ''
      required:
        - balance
      type: object
      properties:
        name:
          type: string
        balance:
          type: integer
        currency:
          type: string
        number:
          type: string
      example:
        name: Main
        balance: 100000
        currency: EUR
        number: abcbb509d401cfc45fd2f98620d5e99a4c5
  securitySchemes:
    Token:
      scheme: bearer
      type: http
      description: A Bearer scheme
