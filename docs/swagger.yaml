openapi: 3.0.2
info:
  title: JM_bank
  version: 1.0.0
servers:
  -
    url: 'http://localhost:1234'
    description: ''
  -
    url: 'http://jaanamairitbank.online'
    description: ''
paths:
  /users:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/postUsersRequest'
        required: true
      tags:
        - users
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userObject'
          description: User successfully registered.
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userObject'
          description: User successfully created
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
              examples:
                Invalid password:
                  value:
                    error: Invalid password
                Parameter is required:
                  value:
                    error: 'User validation failed: {param}: Path `{param}` is required.'
          description: Bad request
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
              examples:
                Username already exists:
                  value:
                    error: Username already exists
          description: Username already exists.
      summary: Registers a new user
  /sessions:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/postSessionsRequest'
        required: true
      tags:
        - sessions
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/postSessionResponse'
          description: User logged in successfully
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
              examples:
                Invalid username/password:
                  value:
                    error: Invalid username/password
                Invalid token:
                  value:
                    error: Invalid token
          description: Invalid username/password
      summary: Logs the user in
    delete:
      tags:
        - sessions
      responses:
        '204':
          description: User logged out successfully
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
              examples:
                Missing Authorization header:
                  value:
                    error: Missing Authorization header
                Invalid token:
                  value:
                    error: Invalid token
          description: Unauthorized
      security:
        -
          Token: []
      summary: Logs the user out
  /users/current:
    get:
      tags:
        - users
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getUsersCurrentResponse'
          description: Successful request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
              examples:
                Missing Authorization header:
                  value:
                    error: Missing Authorization header
                Invalid token:
                  value:
                    error: Invalid token
          description: Unauthorized
      security:
        -
          Token: []
      summary: Returns currently logged in user's data
  /transactions:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/postTransactionsRequest'
        required: true
      tags:
        - transactions
      responses:
        '201':
          content:
            application/json: {}
          description: Transaction has been successfully queued for processing
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
              examples:
                invalidAmount:
                  value:
                    error: Invalid amount
                invalidAccountTo:
                  value:
                    error: Invalid accountTo
          description: Invalid amount
        '402':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
              examples:
                insufficientFunds:
                  value:
                    error: Insufficient funds
          description: Insufficient funds
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
              examples:
                forbidden:
                  value:
                    error: Forbidden
          description: The accountFrom does not belong to the user
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
              examples:
                accountNotFound:
                  value:
                    error: Account not found
          description: Account not found
      security:
        -
          Token: []
components:
  schemas:
    userObject:
      title: user object
      description: ''
      type: object
      properties:
        id:
          description: User's ID
          type: string
        name:
          description: Users full name
          type: string
        username:
          description: User's username
          type: string
        accounts:
          description: Array of user's bank accounts
          type: array
          items:
            $ref: '#/components/schemas/account'
        password:
          description: ''
      example:
        id: 5f912320dcb3ab606a54a1d1
        name: Mairit
        username: mairit
        accounts:
          -
            name: Main
            balance: '100000'
            currency: EUR
            number: 4833142578cef4a5ed30616246f8a34e02c
    errorResponse:
      title: error object
      description: ''
      type: object
      properties:
        error:
          type: string
      example:
        error: Error message.
    postSessionsRequest:
      title: POST /sessions request
      description: ''
      type: object
      properties:
        password:
          description: The password associated with given username
          type: string
        username:
          description: 'A valid username '
          type: string
      example:
        password: plutoonium
        username: mairit
    postSessionResponse:
      title: POST /session response
      description: ''
      type: object
      properties:
        token:
          description: >-
            A session tokens wich needs to be sent back to server in Authorization header with
            every request (Authorization: Bearer <token>)
          type: string
      example:
        token: 5f91235ddcb3ab606a54a1d3
    getUsersCurrentResponse:
      title: GET /Users current response
      description: ''
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        username:
          type: string
        accounts:
          description: Array of user's accounts
          type: array
          items:
            $ref: '#/components/schemas/account'
      example:
        id: 5f912320dcb3ab606a54a1d1
        name: Mairit
        username: mairit
        accounts:
          -
            name: Main
            balance: '100000'
            currency: EUR
            number: 4833142578cef4a5ed30616246f8a34e02c
    account:
      title: account object
      description: ''
      required: []
      type: object
      properties:
        name:
          type: string
        balance:
          type: integer
        currency:
          type: string
        number:
          type: string
      example:
        name: Main
        balance: '100000'
        currency: EUR
        number: 4833142578cef4a5ed30616246f8a34e02c
    postTransactionsRequest:
      title: POST /transactions request
      description: ''
      type: object
      properties:
        accountFrom:
          description: Sender's bank account
          type: string
        accountTo:
          description: Receiver's bank account
          type: string
        amount:
          format: int32
          description: The sum
          type: integer
        explanation:
          description: Purpose of the transaction
          type: string
      example:
        accountFrom: 4833142578cef4a5ed30616246f8a34e02c
        accountTo: b11b887e37a30e1a9658eafefb46dd3115a
        amount: 10
        explanation: Spend it wisely
    postUsersRequest:
      title: POST /users request
      description: ''
      required:
        - name
        - username
        - password
      type: object
      properties:
        name:
          description: User's full name
          type: string
        username:
          description: Desired username
          type: string
        password:
          format: password
          description: Desired password
          type: string
      example:
        name: Mairit
        username: mairit
        password: plutoonium
  securitySchemes:
    Token:
      scheme: bearer
      type: http
      description: A Bearer scheme
